import os
import subprocess

Import('env')

AddOption('--check', dest='check', action='store_true', default=False, help="run unit-tests")

gtest_include_dir = '#' + Dir('googletest/googletest/include').path
gmock_include_dir = '#' + Dir('googletest/googlemock/include').path
googletest_lib_dir = '#' + Dir('.').path

def UseGoogleTest(self):
    self.Append(CPPPATH = [gtest_include_dir, gmock_include_dir],
                LIBPATH = [googletest_lib_dir],
                LIBS = ['gtest', 'gmock'])
AddMethod(Environment, UseGoogleTest)

def builder_unit_test(target, source, env):
    runner = str(source[0].abspath)
    program = str(source[1].abspath)
    work = str(File(program).dir)
    result = subprocess.run([runner, work, program])
    if result.returncode == 0:
        open(str(target[0].abspath),'w').write("PASSED\n")
    else:
        return 1
def emitter_unit_test(target, source, env):
    target = [str(target[0]) + '.passed']
    return target, source
bld = Builder(action = builder_unit_test,
              emitter = emitter_unit_test)
env.Append(BUILDERS = {'TestRunner' :  bld})

runner = env.File('test_runner.sh')
def UnitTest(self, name, sources):
    test_env = self.Clone()
    if not GetOption('check'):
        return
    test_env.UseGoogleTest()
    program = test_env.Program(name, sources)
    test = test_env.TestRunner(name, [runner] + program)
    test_env.AlwaysBuild(test)
    #self.Alias("check", test[0].abspath)
AddMethod(Environment, UnitTest)

subdirs = ['googletest',
           'googlemock']

env.Library('gtest', ['googletest/googletest/src/gtest-all.cc'],
            CPPPATH = ['googletest/googletest/include', 'googletest/googletest'])
env.Library('gmock', ['googletest/googlemock/src/gmock-all.cc'],
            CPPPATH = ['googletest/googletest/include', 'googletest/googlemock/include', 'googletest/googlemock'])
